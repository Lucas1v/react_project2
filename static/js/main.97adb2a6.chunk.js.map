{"version":3,"sources":["store.js","components/Reader.jsx","components/Writer.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialState","text","fullsize","createStore","state","action","type","newtext","current_box","connect","dispatch","changeText","input","toogleRead","id","onClick","value","onChange","event","target","toogleWrite","marked","setOptions","breaks","dangerouslySetInnerHTML","__html","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEMA,EAAe,CACjBC,KAAK,qsCA4CLC,SAAU,GA6BCC,eA1BK,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAClD,OAAOA,EAAOC,MACV,IAAK,cACD,MAAM,CACFL,KAAMI,EAAOE,SAErB,IAAK,cACD,OAAIH,EAAMF,SAMN,2BACOE,GADP,IAEIF,SAAS,IAPb,2BACOE,GADP,IAEIF,SAASG,EAAOG,cAQ5B,QACI,OAAOJ,M,OC9BJK,eApBS,SAAAL,GAAK,MAAK,CAC9BH,KAAMG,EAAMH,KACZC,SAAUE,EAAMF,aAGO,SAAAQ,GAAQ,MAAK,CACpCC,WADoC,SACzBC,GACPF,EAAS,CACLJ,KAAM,cACNC,QAASK,KAGjBC,WAPoC,WAQhCH,EAAS,CACLJ,KAAM,cACNE,YAAY,QAKTC,EAnCA,SAAC,GAA8C,IAA7CR,EAA4C,EAA5CA,KAAMU,EAAsC,EAAtCA,WAAYT,EAA0B,EAA1BA,SAAUW,EAAgB,EAAhBA,WACzC,OAAIX,GAAyB,IAAbA,EAST,wBAPP,sBAAKY,GAAG,SAAR,UACI,sBAAKA,GAAG,SAAR,mBACA,wBAAQC,QAASF,EAAjB,kBAEA,0BAAUC,GAAG,SAASE,MAAOf,EAAMgB,SAAU,SAACC,GAAD,OAAWP,EAAWO,EAAMC,OAAOH,gB,gBC+BzEP,eAfS,SAAAL,GAAK,MAAK,CAC9BH,KAAMG,EAAMH,KACZC,SAAUE,EAAMF,aAIO,SAAAQ,GAAQ,MAAK,CACpCU,YADoC,WAEhCV,EAAS,CACLJ,KAAM,cACNE,YAAY,QAKTC,EApCA,SAAC,GACf,IADgBR,EACjB,EADiBA,KAAMC,EACvB,EADuBA,SAAUkB,EACjC,EADiCA,YAK7B,OAHAC,IAAOC,WAAW,CACdC,QAAQ,IAERrB,GAAyB,IAAbA,EAWR,wBATA,sBAAKY,GAAG,SAAR,UACI,sBAAKA,GAAG,YAAR,sBACA,wBAAQC,QAASK,EAAjB,kBAEA,qBAAKN,GAAG,UAAUU,wBAAyB,CAACC,OAAOJ,IAAOpB,YCC3DyB,MAXf,WACE,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,sBAAKb,GAAG,QAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCAOc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.97adb2a6.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst initialState = {\r\n    text: `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n    \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n    \r\n\\`\\`\\`\r\n// this is multi-line code:\r\n    \r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n    \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n    \r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n    \r\nAnd if you want to get really crazy, even tables:\r\n    \r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n    \r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n    \r\n    \r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n    \r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`,\r\n    fullsize: 0\r\n}\r\n\r\nconst reducerText = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case \"CHANGE-TEXT\": \r\n            return{\r\n                text: action.newtext\r\n            };\r\n        case \"CHANGE-SIZE\":\r\n            if(!state.fullsize){\r\n                return{\r\n                    ...state,\r\n                    fullsize:action.current_box\r\n                };\r\n            }else{\r\n                return{\r\n                    ...state,\r\n                    fullsize:0\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n        \r\n};\r\n\r\n\r\n\r\nexport default createStore(reducerText);","\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Reader = ({text, changeText, fullsize, toogleRead}) => {\r\n    if(!fullsize || fullsize === 1){\r\n    return(\r\n    <div id=\"reader\">\r\n        <div id=\"Editor\">Editor\r\n        <button onClick={toogleRead}>X</button>\r\n        </div>\r\n        <textarea id=\"editor\" value={text} onChange={(event) => changeText(event.target.value)}></textarea>\r\n    </div>\r\n);}else{\r\n    return(<div></div>);\r\n}\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    text: state.text,\r\n    fullsize: state.fullsize\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    changeText(input) {\r\n        dispatch({\r\n            type: \"CHANGE-TEXT\",\r\n            newtext: input\r\n        })\r\n    },\r\n    toogleRead() {\r\n        dispatch({\r\n            type: \"CHANGE-SIZE\",\r\n            current_box:1\r\n        })\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reader)","\r\nimport React from \"react\";\r\nimport { connect} from \"react-redux\";\r\nimport marked from \"marked\";\r\n\r\n\r\nconst Writer = ({text, fullsize, toogleWrite}) => \r\n{\r\n    marked.setOptions({\r\n        breaks: true\r\n    })\r\n    if(!fullsize || fullsize === 2){\r\n        return (   \r\n            <div id=\"writer\">\r\n                <div id=\"previewer\">Previewer\r\n                <button onClick={toogleWrite}>X</button>\r\n                </div>\r\n                <div id=\"preview\" dangerouslySetInnerHTML={{__html:marked(text)}}></div>\r\n            </div>\r\n        );\r\n    }else{\r\n        return(\r\n            <div></div>\r\n        )\r\n    }\r\n  }\r\n\r\nconst mapStateToProps = state => ({\r\n    text: state.text,\r\n    fullsize: state.fullsize\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toogleWrite() {\r\n        dispatch({\r\n            type: \"CHANGE-SIZE\",\r\n            current_box:2\r\n        })\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Writer)","\nimport './App.css';\nimport { Provider } from \"react-redux\"\nimport store from \"./store.js\"\nimport Reader from \"./components/Reader\"\nimport Writer from \"./components/Writer\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div id=\"mayor\">\n        <Reader />\n        <Writer />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}